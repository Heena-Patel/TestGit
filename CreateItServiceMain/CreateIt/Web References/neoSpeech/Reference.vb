'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace neoSpeech
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="Binding", [Namespace]:="https://tts.neospeech.com")>  _
    Partial Public Class NeoSpeechTtsSoapService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetConversionStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConvertSimpleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConvertSsmlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConvertTextOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.CreateIt.My.MySettings.Default.CreateIt_neoSpeech_NeoSpeechTtsSoapService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetConversionStatusCompleted As GetConversionStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event ConvertSimpleCompleted As ConvertSimpleCompletedEventHandler
        
        '''<remarks/>
        Public Event ConvertSsmlCompleted As ConvertSsmlCompletedEventHandler
        
        '''<remarks/>
        Public Event ConvertTextCompleted As ConvertTextCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("https://tts.neospeech.com/GetConversionStatus", RequestNamespace:="https://tts.neospeech.com/GetConversionStatus", ResponseNamespace:="https://tts.neospeech.com/GetConversionStatus")>  _
        Public Function GetConversionStatus(ByVal email As String, ByVal accountId As String, ByVal conversionNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("GetConversionStatus", New Object() {email, accountId, conversionNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetConversionStatusAsync(ByVal email As String, ByVal accountId As String, ByVal conversionNumber As Integer)
            Me.GetConversionStatusAsync(email, accountId, conversionNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetConversionStatusAsync(ByVal email As String, ByVal accountId As String, ByVal conversionNumber As Integer, ByVal userState As Object)
            If (Me.GetConversionStatusOperationCompleted Is Nothing) Then
                Me.GetConversionStatusOperationCompleted = AddressOf Me.OnGetConversionStatusOperationCompleted
            End If
            Me.InvokeAsync("GetConversionStatus", New Object() {email, accountId, conversionNumber}, Me.GetConversionStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetConversionStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetConversionStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetConversionStatusCompleted(Me, New GetConversionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("https://tts.neospeech.com/ConvertSimple", RequestNamespace:="https://tts.neospeech.com/ConvertSimple", ResponseNamespace:="https://tts.neospeech.com/ConvertSimple")>  _
        Public Function ConvertSimple(ByVal email As String, ByVal accountId As String, ByVal loginKey As String, ByVal loginPassword As String, ByVal voice As String, ByVal outputFormat As String, ByVal sampleRate As Single, ByVal text As String) As String()
            Dim results() As Object = Me.Invoke("ConvertSimple", New Object() {email, accountId, loginKey, loginPassword, voice, outputFormat, sampleRate, text})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConvertSimpleAsync(ByVal email As String, ByVal accountId As String, ByVal loginKey As String, ByVal loginPassword As String, ByVal voice As String, ByVal outputFormat As String, ByVal sampleRate As Single, ByVal text As String)
            Me.ConvertSimpleAsync(email, accountId, loginKey, loginPassword, voice, outputFormat, sampleRate, text, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConvertSimpleAsync(ByVal email As String, ByVal accountId As String, ByVal loginKey As String, ByVal loginPassword As String, ByVal voice As String, ByVal outputFormat As String, ByVal sampleRate As Single, ByVal text As String, ByVal userState As Object)
            If (Me.ConvertSimpleOperationCompleted Is Nothing) Then
                Me.ConvertSimpleOperationCompleted = AddressOf Me.OnConvertSimpleOperationCompleted
            End If
            Me.InvokeAsync("ConvertSimple", New Object() {email, accountId, loginKey, loginPassword, voice, outputFormat, sampleRate, text}, Me.ConvertSimpleOperationCompleted, userState)
        End Sub
        
        Private Sub OnConvertSimpleOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConvertSimpleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConvertSimpleCompleted(Me, New ConvertSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("https://tts.neospeech.com/ConvertSsml", RequestNamespace:="https://tts.neospeech.com/ConvertSsml", ResponseNamespace:="https://tts.neospeech.com/ConvertSsml")>  _
        Public Function ConvertSsml(ByVal email As String, ByVal accountId As String, ByVal loginKey As String, ByVal loginPassword As String, ByVal voice As String, ByVal outputFormat As String, ByVal sampleRate As Single, ByVal ssml As String, ByVal useUserDictionary As Boolean) As String()
            Dim results() As Object = Me.Invoke("ConvertSsml", New Object() {email, accountId, loginKey, loginPassword, voice, outputFormat, sampleRate, ssml, useUserDictionary})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConvertSsmlAsync(ByVal email As String, ByVal accountId As String, ByVal loginKey As String, ByVal loginPassword As String, ByVal voice As String, ByVal outputFormat As String, ByVal sampleRate As Single, ByVal ssml As String, ByVal useUserDictionary As Boolean)
            Me.ConvertSsmlAsync(email, accountId, loginKey, loginPassword, voice, outputFormat, sampleRate, ssml, useUserDictionary, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConvertSsmlAsync(ByVal email As String, ByVal accountId As String, ByVal loginKey As String, ByVal loginPassword As String, ByVal voice As String, ByVal outputFormat As String, ByVal sampleRate As Single, ByVal ssml As String, ByVal useUserDictionary As Boolean, ByVal userState As Object)
            If (Me.ConvertSsmlOperationCompleted Is Nothing) Then
                Me.ConvertSsmlOperationCompleted = AddressOf Me.OnConvertSsmlOperationCompleted
            End If
            Me.InvokeAsync("ConvertSsml", New Object() {email, accountId, loginKey, loginPassword, voice, outputFormat, sampleRate, ssml, useUserDictionary}, Me.ConvertSsmlOperationCompleted, userState)
        End Sub
        
        Private Sub OnConvertSsmlOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConvertSsmlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConvertSsmlCompleted(Me, New ConvertSsmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("https://tts.neospeech.com/ConvertText", RequestNamespace:="https://tts.neospeech.com/ConvertText", ResponseNamespace:="https://tts.neospeech.com/ConvertText")>  _
        Public Function ConvertText(ByVal email As String, ByVal accountId As String, ByVal loginKey As String, ByVal loginPassword As String, ByVal voice As String, ByVal outputFormat As String, ByVal sampleRate As Single, ByVal text As String, ByVal useUserDictionary As Boolean, ByVal volume As Integer, ByVal speed As Integer, ByVal pitch As Integer) As String()
            Dim results() As Object = Me.Invoke("ConvertText", New Object() {email, accountId, loginKey, loginPassword, voice, outputFormat, sampleRate, text, useUserDictionary, volume, speed, pitch})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConvertTextAsync(ByVal email As String, ByVal accountId As String, ByVal loginKey As String, ByVal loginPassword As String, ByVal voice As String, ByVal outputFormat As String, ByVal sampleRate As Single, ByVal text As String, ByVal useUserDictionary As Boolean, ByVal volume As Integer, ByVal speed As Integer, ByVal pitch As Integer)
            Me.ConvertTextAsync(email, accountId, loginKey, loginPassword, voice, outputFormat, sampleRate, text, useUserDictionary, volume, speed, pitch, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConvertTextAsync(ByVal email As String, ByVal accountId As String, ByVal loginKey As String, ByVal loginPassword As String, ByVal voice As String, ByVal outputFormat As String, ByVal sampleRate As Single, ByVal text As String, ByVal useUserDictionary As Boolean, ByVal volume As Integer, ByVal speed As Integer, ByVal pitch As Integer, ByVal userState As Object)
            If (Me.ConvertTextOperationCompleted Is Nothing) Then
                Me.ConvertTextOperationCompleted = AddressOf Me.OnConvertTextOperationCompleted
            End If
            Me.InvokeAsync("ConvertText", New Object() {email, accountId, loginKey, loginPassword, voice, outputFormat, sampleRate, text, useUserDictionary, volume, speed, pitch}, Me.ConvertTextOperationCompleted, userState)
        End Sub
        
        Private Sub OnConvertTextOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConvertTextCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConvertTextCompleted(Me, New ConvertTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub GetConversionStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetConversionStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetConversionStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub ConvertSimpleCompletedEventHandler(ByVal sender As Object, ByVal e As ConvertSimpleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConvertSimpleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub ConvertSsmlCompletedEventHandler(ByVal sender As Object, ByVal e As ConvertSsmlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConvertSsmlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub ConvertTextCompletedEventHandler(ByVal sender As Object, ByVal e As ConvertTextCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConvertTextCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
End Namespace
